Демо 10. PostgreSQL CDC to PostgreSQL

1) Запускаем Kafka, Kafka Connect, Postgres и ClickHouse
export DOCKER_CLI_HINTS=false
docker compose up -d
docker compose ps -a

2) Проверям логи Kafka Connect
docker logs -f connect
^C

3) Проверяем статус и плагины коннекторов
curl http://localhost:8083 | jq
curl http://localhost:8083/connector-plugins | jq

4) Проверяем топики
docker exec kafka1 kafka-topics --list --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092

5) Подключаемся к базе-источнику и загружаем данные
docker exec -ti postgres1 psql -U postgres
CREATE TABLE clients (id int PRIMARY KEY, first_name text, last_name text, gender text, card_number text, bill numeric(7,2), created_date timestamp, modified_date timestamp);
COPY clients FROM '/data/clients.csv' WITH (FORMAT csv, HEADER true);
SELECT count(*) FROM clients;
SELECT * FROM clients LIMIT 5;
\q

6) Создаём коннектор clients-cdc-connector
curl -X POST --data-binary "@clients-cdc.json" -H "Content-Type: application/json" http://localhost:8083/connectors | jq

7) Проверяем коннектор customers-cdc-connector
curl http://localhost:8083/connectors | jq
curl http://localhost:8083/connectors/clients-cdc-connector/status | jq

8) Проверяем топики
docker exec kafka1 kafka-topics --list --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092

9) Читаем топик postgres.cdc.public.clients
docker exec kafka1 kafka-console-consumer --topic postgres.cdc.public.clients --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092 --from-beginning --property print.offset=true --property print.key=true

10) Создаём коннектор clients-sink-connector
curl -X POST --data-binary "@clients-sink.json" -H "Content-Type: application/json" http://localhost:8083/connectors | jq

11) Проверяем коннектор clients-sink-connector
curl http://localhost:8083/connectors | jq
curl http://localhost:8083/connectors/clients-sink-connector/status | jq

12) Подключаемся к базе-приёмнику и проверяем данные
docker exec -ti postgres2 psql -U postgres
\dt
SELECT count(*) FROM clients;
SELECT * FROM clients LIMIT 5;
\q

13) Обновляем и удаляем записи в таблице в базе-источнике
docker exec -ti postgres1 psql -U postgres
INSERT INTO clients VALUES (1001,'Imon','Dav','Female','4017954285320',4121.75,'2022-07-15 09:30:46','2022-04-07 09:53:12');
UPDATE clients SET bill = 5000.0 WHERE id = 1;
DELETE FROM clients WHERE id = 2;
SELECT count(*) FROM clients;
\q

14) Подключаемся к базе-приёмнику и проверяем данные
docker exec -ti postgres2 psql -U postgres
SELECT count(*) FROM clients;
SELECT * FROM clients WHERE id IN (1, 2, 1001);
\q

15) Завершаем работу
docker compose down
docker container prune -f
docker volume prune -f
docker network prune -f
