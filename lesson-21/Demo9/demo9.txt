Демо 9. PostgreSQL CDC to ClickHouse

1) Запускаем Kafka, Kafka Connect, Postgres и ClickHouse
docker compose up -d
docker compose ps -a

2) Проверям логи Kafka Connect
docker logs -f connect
^C

3) Проверяем статус и плагины коннекторов
curl http://localhost:8083 | jq
curl http://localhost:8083/connector-plugins | jq

4) Проверяем топики
docker exec kafka1 kafka-topics --list --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094

5) Создадим таблицу в PostgreSQL
docker exec -ti postgres psql -U postgres
CREATE TABLE customers (id INT PRIMARY KEY, name TEXT, age INT);
INSERT INTO customers (id, name, age) VALUES (1, 'Fred', 34);
\q

6) Создаём коннектор customers
curl -X POST --data-binary "@customers.json" -H "Content-Type: application/json" http://localhost:8083/connectors | jq

7) Проверяем коннектор customers
curl http://localhost:8083/connectors | jq
curl http://localhost:8083/connectors/customers-connector/status | jq

8) Проверяем топики
docker exec kafka1 kafka-topics --list --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094

9) Читаем топик postgres.public.customers
docker exec kafka1 kafka-console-consumer --topic postgres.public.customers --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094 --property print.offset=true --property print.key=true --from-beginning
^C

10) Подключаемся к ClickHouse и создаём таблицы
docker exec -ti clickhouse clickhouse-client
DROP TABLE IF EXISTS customers;
CREATE TABLE customers (
    `before.id` Nullable(Int32),
    `before.name` Nullable(String),
    `before.age` Nullable(Int32),
    `after.id` Nullable(Int32),
    `after.name` Nullable(String),
    `after.age` Nullable(Int32),
    `source.version` Nullable(String),
    `source.connector` Nullable(String),
    `source.name` Nullable(String),
    `source.ts_ms` Nullable(UInt64),
    `source.snapshot` Nullable(String),
    `source.db` Nullable(String),
    `source.sequence` Nullable(String),
    `source.schema` Nullable(String),
    `source.table` Nullable(String),
    `source.txId` Nullable(UInt64),
    `source.lsn` Nullable(UInt64),
    `source.xmin` Nullable(UInt64),
    op LowCardinality(String),
    ts_ms Nullable(UInt64),
    `transaction.id` Nullable(UInt64),
    `transaction.total_order` Nullable(UInt64),
    `transaction.data_collection_order` Nullable(UInt64)
)
ENGINE = ReplacingMergeTree
ORDER BY tuple();
SHOW TABLES;
\q

11) Создаём коннектор clickhouse
curl -X POST --data-binary "@clickhouse.json" -H "Content-Type: application/json" http://localhost:8083/connectors | jq

12) Проверяем коннектор clickhouse
curl http://localhost:8083/connectors | jq
curl http://localhost:8083/connectors/clickhouse-connector/status | jq

13) Подключаемся к ClickHouse и проверяем таблицу
docker exec -ti clickhouse clickhouse-client
SELECT * FROM customers;
\q

14) Добавляем запись в таблицу
docker exec -ti postgres psql -U postgres
INSERT INTO customers (id, name, age) VALUES (2, 'Sue', 25);
INSERT INTO customers (id, name, age) VALUES (3, 'Bill', 51);
INSERT INTO customers (id, name, age) VALUES (4, 'Ann', 18);
UPDATE customers set age = 35 WHERE id = 4;
DELETE FROM customers WHERE id = 2;
SELECT * FROM customers;
\q

15) Подключаемся к ClickHouse и проверяем таблицу
docker exec -ti clickhouse clickhouse-client
SELECT * FROM customers;
\q

16) Удаляем коннектор
curl -X DELETE http://localhost:8083/connectors/clickhouse-connector
curl -X DELETE http://localhost:8083/connectors/customers-connector

17) Останавливаем Kafka и Kafka Connect
docker compose stop
docker container prune -f
docker volume prune -f
